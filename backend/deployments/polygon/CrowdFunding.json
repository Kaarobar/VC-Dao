{
  "address": "0x4f940CA220381aab3aEb52ab3aF8b14e6eaC5CE1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goalAmount",
          "type": "uint256"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toIssue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goalAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "durationInDays",
          "type": "uint256"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveProjects",
      "outputs": [
        {
          "internalType": "contract Project[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc662cf02c296cce1f150f335ae78e5d57cf4946c350b7645d72f6c74a7f467ab",
  "receipt": {
    "to": null,
    "from": "0xb3cD2703191D578ea6B02c79AD1820329f208ae8",
    "contractAddress": "0x4f940CA220381aab3aEb52ab3aF8b14e6eaC5CE1",
    "transactionIndex": 25,
    "gasUsed": "1671043",
    "logsBloom": "0x
    "blockHash": "0xaf55a90c47524255b01170cad0b1c03c8d76ea9e2886cb361eeb8b2e4b324ec2",
    "transactionHash": "0xc662cf02c296cce1f150f335ae78e5d57cf4946c350b7645d72f6c74a7f467ab",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 29200540,
        "transactionHash": "0xc662cf02c296cce1f150f335ae78e5d57cf4946c350b7645d72f6c74a7f467ab",
        "address": "0x4f940CA220381aab3aEb52ab3aF8b14e6eaC5CE1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b3cd2703191d578ea6b02c79ad1820329f208ae8"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0xaf55a90c47524255b01170cad0b1c03c8d76ea9e2886cb361eeb8b2e4b324ec2"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 29200540,
        "transactionHash": "0xc662cf02c296cce1f150f335ae78e5d57cf4946c350b7645d72f6c74a7f467ab",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b3cd2703191d578ea6b02c79ad1820329f208ae8",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000007b7bf004461db000000000000000000000000000000000000000000000000064dfa3f73936b310000000000000000000000000000000000000000000008bbc68275cc9a2f574a00000000000000000000000000000000000000000000000006464280734f09560000000000000000000000000000000000000000000008bbc68a2d8b9a73b925",
        "logIndex": 78,
        "blockHash": "0xaf55a90c47524255b01170cad0b1c03c8d76ea9e2886cb361eeb8b2e4b324ec2"
      }
    ],
    "blockNumber": 29200540,
    "cumulativeGasUsed": "10470084",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "970fe464e7d21bcc0cca8b8160889093",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProjects\",\"outputs\":[{\"internalType\":\"contract Project[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProject(address,uint256,uint256,string,string,uint256)\":{\"details\":\"This is called by the CrowdFundingDAO, once the voters have agreed to add this project into active list\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Propose a project (name, website, logo, prject description, prospects, fund amount, formula: numOfTokens to issue in exchange for 1ETH, dao details) Fund a project (projectId, amount) - become a member of the project's DAO if enough num of tokens Funding complete - DAO created, members added\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunding.sol\":\"CrowdFunding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/CrowdFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./Project.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * Propose a project (name, website, logo, prject description, prospects, fund amount, formula: numOfTokens to issue in exchange for 1ETH, dao details)\\r\\n * Fund a project (projectId, amount) - become a member of the project's DAO if enough num of tokens\\r\\n * Funding complete - DAO created, members added\\r\\n */\\r\\ncontract CrowdFunding is Ownable {\\r\\n    Project[] private s_projects;\\r\\n    uint private currentProjId = 0;\\r\\n\\r\\n    event ProjectCreated(\\r\\n        address indexed contractAddress,\\r\\n        address indexed creator,\\r\\n        uint projectId,\\r\\n        string projectTitle,\\r\\n        uint256 deadline,\\r\\n        uint256 goalAmount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev This is called by the CrowdFundingDAO, once the voters have agreed to add this project into active list\\r\\n     */\\r\\n    function createProject(\\r\\n        address token,\\r\\n        uint toIssue,\\r\\n        uint goalAmount,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint durationInDays\\r\\n    ) public onlyOwner {\\r\\n        uint fundRaisingDeadline = block.timestamp +\\r\\n            (durationInDays * 24 * 3600);\\r\\n        Project project = new Project(\\r\\n            msg.sender,\\r\\n            token,\\r\\n            currentProjId,\\r\\n            toIssue,\\r\\n            title,\\r\\n            description,\\r\\n            fundRaisingDeadline,\\r\\n            goalAmount\\r\\n        );\\r\\n        s_projects.push(project);\\r\\n        currentProjId += 1;\\r\\n        emit ProjectCreated(\\r\\n            address(project), //project address\\r\\n            msg.sender, //project initiator\\r\\n            (currentProjId - 1),\\r\\n            title, //coin name or starting of project\\r\\n            fundRaisingDeadline, //deadline in days\\r\\n            goalAmount //amnt needed to be raised\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getActiveProjects() public view returns (Project[] memory) {\\r\\n        return s_projects;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2dca3a2b326c5187fafa7bdf931a4c311804f52467ed6c9ca8fe17c66bfc0903\",\"license\":\"MIT\"},\"contracts/Project.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\nerror Project__IncorrectState();\\r\\nerror Project__CreatorCannotFundHisProject();\\r\\nerror Project__FundingNotExpired();\\r\\nerror Project__FundsNotGiven();\\r\\nerror Project__FailedToSendFunds();\\r\\nerror Project__AmountExceedsLimit();\\r\\n\\r\\ncontract Project is Ownable {\\r\\n    enum State {\\r\\n        FUNDRAISING,\\r\\n        SUCCESS,\\r\\n        EXPIRED,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    event ProjectStart(uint indexed id, address project_address);\\r\\n\\r\\n    address payable private immutable i_creator;\\r\\n    address private immutable i_token;\\r\\n    uint private immutable i_id;\\r\\n    string private s_title;\\r\\n    string private s_description;\\r\\n    uint private s_fundingRound;\\r\\n    uint private s_currentBalance;\\r\\n    State private s_state = State.CLOSED;\\r\\n\\r\\n    mapping(address => uint) public contributedFunds;\\r\\n    mapping(uint => uint) tokensToIssue;\\r\\n    mapping(uint => uint) goalAmount;\\r\\n    mapping(uint => uint) raiseBy;\\r\\n\\r\\n    event ClaimTokens(address indexed to, uint amount);\\r\\n\\r\\n    event FundsContributed(\\r\\n        address indexed sender,\\r\\n        address indexed contractAddress,\\r\\n        uint amount\\r\\n    );\\r\\n\\r\\n    event AmountRefunded(address indexed to, uint amount);\\r\\n\\r\\n    event FundingSuccess(\\r\\n        uint indexed projectId,\\r\\n        address indexed projectToken,\\r\\n        uint round\\r\\n    );\\r\\n\\r\\n    event FundingExpired(\\r\\n        uint indexed projectId,\\r\\n        address indexed projectToken,\\r\\n        uint round\\r\\n    );\\r\\n\\r\\n    event FundingInitiated(\\r\\n        uint indexed projectId,\\r\\n        address indexed projectToken,\\r\\n        uint round,\\r\\n        uint goalAmount,\\r\\n        uint fundRaisingDeadline\\r\\n    );\\r\\n\\r\\n    modifier isState(State _state) {\\r\\n        if (s_state != _state) {\\r\\n            revert Project__IncorrectState();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address owner,\\r\\n        address token,\\r\\n        uint id,\\r\\n        uint tokenToIssue,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint fundRaisingDeadline,\\r\\n        uint fundingNeeded\\r\\n    ) {\\r\\n        i_creator = payable(owner);\\r\\n        i_token = token;\\r\\n        s_title = title;\\r\\n        i_id = id;\\r\\n        s_description = description;\\r\\n        raiseBy[0] = block.timestamp + fundRaisingDeadline * 24 * 3600;\\r\\n        s_state = State.FUNDRAISING;\\r\\n        s_fundingRound = 0;\\r\\n        tokensToIssue[0] = tokenToIssue*10**18;\\r\\n        goalAmount[0] = fundingNeeded *10**18;\\r\\n        s_currentBalance = 0;\\r\\n        emit ProjectStart(id, address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gather funds to meet the goal before deadline. Creator is not allowed to fund his project. For intial rounds, funders can only give a certain max\\r\\n     * amount which would be change to any amount after certain number of rounds\\r\\n     */\\r\\n    function contribute() public payable isState(State.FUNDRAISING) {\\r\\n        if (msg.sender == i_creator)\\r\\n            revert Project__CreatorCannotFundHisProject();\\r\\n        contributedFunds[msg.sender] += msg.value;\\r\\n        s_currentBalance += msg.value;\\r\\n        emit FundsContributed(msg.sender, address(this), msg.value);\\r\\n        checkIfFundingCompletedOrExpired();\\r\\n    }\\r\\n\\r\\n    function checkIfFundingCompletedOrExpired() public {\\r\\n        if (s_currentBalance >= goalAmount[s_fundingRound]) {\\r\\n            s_state = State.SUCCESS;\\r\\n            emit FundingSuccess(i_id, i_token, s_fundingRound);\\r\\n        } else if (block.timestamp > raiseBy[s_fundingRound]) {\\r\\n            s_state = State.EXPIRED;\\r\\n            emit FundingExpired(i_id, i_token, s_fundingRound);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev start successive funding rounds after majority funders agree to it\\r\\n     */\\r\\n    function initiateFundingRound(\\r\\n        uint amountToRaise,\\r\\n        uint tokenToIssue,\\r\\n        uint fundRaisingDeadline\\r\\n    ) public onlyOwner isState(State.CLOSED) {\\r\\n        s_fundingRound += 1;\\r\\n        goalAmount[s_fundingRound] = amountToRaise * 10 **18;\\r\\n        tokensToIssue[s_fundingRound] = tokenToIssue;\\r\\n        raiseBy[s_fundingRound] = block.timestamp + fundRaisingDeadline*24*3600;\\r\\n        s_state = State.FUNDRAISING;\\r\\n        emit FundingInitiated(\\r\\n            i_id,\\r\\n            i_token,\\r\\n            s_fundingRound,\\r\\n            amountToRaise,\\r\\n            fundRaisingDeadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function payOut() public onlyOwner isState(State.SUCCESS) returns (bool) {\\r\\n        (bool callSuccess, ) = i_creator.call{value: s_currentBalance}(\\\"\\\");\\r\\n        if (!callSuccess) revert Project__FailedToSendFunds();\\r\\n\\r\\n        s_currentBalance = 0;\\r\\n        s_state = State.CLOSED;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev investor recieves a proportion of Project's tokens based on amount funded\\r\\n     * @notice assume the Project token is already deployed\\r\\n     *\\r\\n     * SUGGESTION: We can mint the relevant project tokens here and issue it to investor\\r\\n     */\\r\\n    function claimTokens() public isState(State.SUCCESS) returns (bool) {\\r\\n        if (contributedFunds[msg.sender] == 0) revert Project__FundsNotGiven();\\r\\n\\r\\n        uint tokens = (contributedFunds[msg.sender] /\\r\\n            goalAmount[s_fundingRound]) * tokensToIssue[s_fundingRound];\\r\\n        contributedFunds[msg.sender] = 0;\\r\\n\\r\\n        IERC20(i_token).transfer(msg.sender, tokens);\\r\\n        emit ClaimTokens(msg.sender, tokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getRefund() public isState(State.EXPIRED) returns (bool) {\\r\\n        if (block.timestamp < raiseBy[s_fundingRound])\\r\\n            revert Project__FundingNotExpired();\\r\\n        if (contributedFunds[msg.sender] == 0) revert Project__FundsNotGiven();\\r\\n\\r\\n        uint amountToRefund = contributedFunds[msg.sender];\\r\\n        (bool callSuccess, ) = msg.sender.call{value: amountToRefund}(\\\"\\\");\\r\\n        if (!callSuccess) revert Project__FailedToSendFunds();\\r\\n\\r\\n        contributedFunds[msg.sender] = 0;\\r\\n        s_currentBalance -= amountToRefund;\\r\\n        emit AmountRefunded(msg.sender, amountToRefund);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getState() public view returns (State) {\\r\\n        return s_state;\\r\\n    }\\r\\n\\r\\n    function getDetails()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address payable projectStarter,\\r\\n            string memory projectTitle,\\r\\n            string memory projectDescription,\\r\\n            uint projectId,\\r\\n            uint amountToRaise,\\r\\n            uint deadline,\\r\\n            uint amountRaised,\\r\\n            uint fundingRound,\\r\\n            State currentState\\r\\n        )\\r\\n    {\\r\\n        projectStarter = i_creator;\\r\\n        projectTitle = s_title;\\r\\n        projectDescription = s_description;\\r\\n        projectId = i_id;\\r\\n        amountToRaise = goalAmount[s_fundingRound];\\r\\n        deadline = raiseBy[s_fundingRound];\\r\\n        amountRaised = s_currentBalance;\\r\\n        fundingRound = s_fundingRound;\\r\\n        currentState = s_state;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5975d166a0c9a051be9c8893f098285bd728e72cd1408b6e121c93b8be6fc26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025534801561001557600080fd5b5061001f33610024565b610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611cec806100836000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80638da5cb5b11620000565780638da5cb5b14620000a2578063b0655a2c14620000be578063f2fde38b14620000d557600080fd5b806329cfce411462000074578063715018a61462000096575b600080fd5b6200007e620000ec565b6040516200008d919062000423565b60405180910390f35b620000a062000150565b005b6000546040516001600160a01b0390911681526020016200008d565b620000a0620000cf3660046200053a565b62000168565b620000a0620000e6366004620005d3565b620002c2565b606060018054806020026020016040519081016040528092919081815260200182805480156200014657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000127575b5050505050905090565b6200015a6200035c565b620001666000620003b8565b565b620001726200035c565b6000620001818260186200060e565b6200018f90610e106200060e565b6200019b90426200062e565b905060003388600254898888878c604051620001b79062000415565b620001ca9897969594939291906200068c565b604051809103906000f080158015620001e7573d6000803e3d6000fd5b5060018054808201825560008281527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600280549394509192620002569084906200062e565b909155505060025433906001600160a01b038316907ffb6a4b4a9a941613181b9b90b80c89559f5b6128ecbe7eaf24dba64198de7940906200029b90600190620006f5565b88868b604051620002b094939291906200070b565b60405180910390a35050505050505050565b620002cc6200035c565b6001600160a01b0381166200034e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200035981620003b8565b50565b6000546001600160a01b03163314620001665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000345565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61157d806200073a83390190565b6020808252825182820181905260009190848201906040850190845b81811015620004665783516001600160a01b0316835292840192918401916001016200043f565b50909695505050505050565b80356001600160a01b03811681146200048a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004b757600080fd5b813567ffffffffffffffff80821115620004d557620004d56200048f565b604051601f8301601f19908116603f011681019082821181831017156200050057620005006200048f565b816040528381528660208588010111156200051a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156200055457600080fd5b6200055f8762000472565b95506020870135945060408701359350606087013567ffffffffffffffff808211156200058b57600080fd5b620005998a838b01620004a5565b94506080890135915080821115620005b057600080fd5b50620005bf89828a01620004a5565b92505060a087013590509295509295509295565b600060208284031215620005e657600080fd5b620005f18262000472565b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006285762000628620005f8565b92915050565b80820180821115620006285762000628620005f8565b6000815180845260005b818110156200066c576020818501810151868301820152016200064e565b506000602082860101526020601f19601f83011685010191505092915050565b60006101006001600160a01b03808c168452808b16602085015250886040840152876060840152806080840152620006c78184018862000644565b905082810360a0840152620006dd818762000644565b60c0840195909552505060e001529695505050505050565b81810381811115620006285762000628620005f8565b84815260806020820152600062000726608083018662000644565b604083019490945250606001529291505056fe60e06040526005805460ff191660031790553480156200001e57600080fd5b506040516200157d3803806200157d8339810160408190526200004191620002df565b6200004c33620001ad565b6001600160a01b03808916608052871660a05260016200006d858262000425565b5060c0869052600262000081848262000425565b506200008f82601862000507565b6200009d90610e1062000507565b620000a9904262000527565b600080805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b919091556005805460ff19169055600355620000f985670de0b6b3a764000062000507565b6000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df556200013881670de0b6b3a764000062000507565b6000808052600860209081527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c79290925560045560405130815287917f3c831dcf6fd0b80fe93c3ee5d9557ada5a592ba10c1dbe75b71be141107d60a5910160405180910390a250505050505050506200053d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200021557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024257600080fd5b81516001600160401b03808211156200025f576200025f6200021a565b604051601f8301601f19908116603f011681019082821181831017156200028a576200028a6200021a565b81604052838152602092508683858801011115620002a757600080fd5b600091505b83821015620002cb5785820183015181830184015290820190620002ac565b600093810190920192909252949350505050565b600080600080600080600080610100898b031215620002fd57600080fd5b6200030889620001fd565b97506200031860208a01620001fd565b60408a015160608b015160808c015192995090975095506001600160401b03808211156200034557600080fd5b620003538c838d0162000230565b955060a08b01519150808211156200036a57600080fd5b50620003798b828c0162000230565b60c08b015160e0909b0151999c989b509699959894979350505050565b600181811c90821680620003ab57607f821691505b602082108103620003cc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042057600081815260208120601f850160051c81016020861015620003fb5750805b601f850160051c820191505b818110156200041c5782815560010162000407565b5050505b505050565b81516001600160401b038111156200044157620004416200021a565b620004598162000452845462000396565b84620003d2565b602080601f831160018114620004915760008415620004785750858301515b600019600386901b1c1916600185901b1785556200041c565b600085815260208120601f198616915b82811015620004c257888601518255948401946001909101908401620004a1565b5085821015620004e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620005215762000521620004f1565b92915050565b80820180821115620005215762000521620004f1565b60805160a05160c051610fd8620005a56000396000818161035a01528181610758015281816108040152610c3501526000818161032f015281816104a80152818161073501526107e10152600081816108a30152818161097f0152610af80152610fd86000f3fe6080604052600436106100c75760003560e01c8063bd96fae711610074578063ea07551d1161004e578063ea07551d146101c0578063f2fde38b146101fb578063fbbf93a01461021b57600080fd5b8063bd96fae71461018e578063c2052403146101a3578063d7bb99ba146101b857600080fd5b8063715018a6116100a5578063715018a61461013c5780638da5cb5b14610151578063b2d5ae441461017957600080fd5b80631865c57d146100cc57806319aea115146100f557806348c54b9d14610117575b600080fd5b3480156100d857600080fd5b5060055460ff166040516100ec9190610da7565b60405180910390f35b34801561010157600080fd5b50610115610110366004610dbb565b610245565b005b34801561012357600080fd5b5061012c6103ad565b60405190151581526020016100ec565b34801561014857600080fd5b50610115610554565b34801561015d57600080fd5b506000546040516001600160a01b0390911681526020016100ec565b34801561018557600080fd5b5061012c610568565b34801561019a57600080fd5b506101156106fb565b3480156101af57600080fd5b5061012c61084e565b61011561093d565b3480156101cc57600080fd5b506101ed6101db366004610de7565b60066020526000908152604090205481565b6040519081526020016100ec565b34801561020757600080fd5b50610115610216366004610de7565b610a56565b34801561022757600080fd5b50610230610ae8565b6040516100ec99989796959493929190610e5d565b61024d610cad565b60038060055460ff16600381111561026757610267610d6f565b146102855760405163f383ec1960e01b815260040160405180910390fd5b6001600360008282546102989190610ee7565b909155506102b0905084670de0b6b3a7640000610efa565b60038054600090815260086020908152604080832094909455915481526007909152208390556102e1826018610efa565b6102ed90610e10610efa565b6102f79042610ee7565b60038054600090815260096020908152604091829020939093556005805460ff191690559054815190815291820186905281018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316907f0000000000000000000000000000000000000000000000000000000000000000907f753b8d108e14f127257005d564a8287f99943fc30306134452cf4cad0bb5dcb39060600160405180910390a350505050565b600060018060055460ff1660038111156103c9576103c9610d6f565b146103e75760405163f383ec1960e01b815260040160405180910390fd5b33600090815260066020526040812054900361041657604051632a022d0f60e11b815260040160405180910390fd5b6003546000908152600760209081526040808320546008835281842054338552600690935290832054909161044a91610f11565b6104549190610efa565b3360008181526006602052604080822091909155517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018290529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610f33565b5060405181815233907f4d7f917f6b905f28ba5297e6c224a6cfec20ac6a3698a55b412d30b95ad25d2f9060200160405180910390a260019250505090565b61055c610cad565b6105666000610d07565b565b600060028060055460ff16600381111561058457610584610d6f565b146105a25760405163f383ec1960e01b815260040160405180910390fd5b6003546000908152600960205260409020544210156105ed576040517f9af5028d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260066020526040812054900361061c57604051632a022d0f60e11b815260040160405180910390fd5b3360008181526006602052604080822054905190929083908381818185875af1925050503d806000811461066c576040519150601f19603f3d011682016040523d82523d6000602084013e610671565b606091505b50509050806106935760405163f68aaf4160e01b815260040160405180910390fd5b336000908152600660205260408120819055600480548492906106b7908490610f55565b909155505060405182815233907f7ab855409e27a3b361adc9ebbc0750f5efb6d4594be28fef73c314d86d13a7f79060200160405180910390a26001935050505090565b600354600090815260086020526040902054600454106107a8576005805460ff191660011790556003546040519081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000907fa39ae0d7691252825674f6236b141740ed91074f3d797e104266d0b51ff18a68906020015b60405180910390a3565b600354600090815260096020526040902054421115610566576005805460ff191660021790556003546040519081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000907fbc000f0d278d68c57829609b564a0212ef66a6062eb8ed49f97960744f8f21479060200161079e565b6000610858610cad565b60018060055460ff16600381111561087257610872610d6f565b146108905760405163f383ec1960e01b815260040160405180910390fd5b6004546040516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016918381818185875af1925050503d80600081146108fc576040519150601f19603f3d011682016040523d82523d6000602084013e610901565b606091505b50509050806109235760405163f68aaf4160e01b815260040160405180910390fd5b50506000600455506005805460ff19166003179055600190565b60008060055460ff16600381111561095757610957610d6f565b146109755760405163f383ec1960e01b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036109d7576040517fd39b9cf600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260066020526040812080543492906109f6908490610ee7565b925050819055503460046000828254610a0f9190610ee7565b9091555050604051348152309033907f37be9bdbd3d0fa9f42e06daf81145e35769daee2a65754d3986d0daf9899a7d69060200160405180910390a3610a536106fb565b50565b610a5e610cad565b6001600160a01b038116610adf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610a5381610d07565b60006060806000806000806000807f0000000000000000000000000000000000000000000000000000000000000000985060018054610b2690610f68565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5290610f68565b8015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b5050505050975060028054610bb390610f68565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdf90610f68565b8015610c2c5780601f10610c0157610100808354040283529160200191610c2c565b820191906000526020600020905b815481529060010190602001808311610c0f57829003601f168201915b505050505096507f0000000000000000000000000000000000000000000000000000000000000000955060086000600354815260200190815260200160002054945060096000600354815260200190815260200160002054935060045492506003549150600560009054906101000a900460ff169050909192939495969798565b6000546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ad6565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052602160045260246000fd5b60048110610da357634e487b7160e01b600052602160045260246000fd5b9052565b60208101610db58284610d85565b92915050565b600080600060608486031215610dd057600080fd5b505081359360208301359350604090920135919050565b600060208284031215610df957600080fd5b81356001600160a01b0381168114610e1057600080fd5b9392505050565b6000815180845260005b81811015610e3d57602081850181015186830182015201610e21565b506000602082860101526020601f19601f83011685010191505092915050565b60006101206001600160a01b038c168352806020840152610e808184018c610e17565b90508281036040840152610e94818b610e17565b9150508760608301528660808301528560a08301528460c08301528360e0830152610ec3610100830184610d85565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610db557610db5610ed1565b8082028115828204841417610db557610db5610ed1565b600082610f2e57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610f4557600080fd5b81518015158114610e1057600080fd5b81810381811115610db557610db5610ed1565b600181811c90821680610f7c57607f821691505b602082108103610f9c57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212200f6801cb30ceb240797374a5a89c51d0d78c530f7d73c034d87679269cae50a264736f6c63430008110033a2646970667358221220e760f4455a1124e3df911f31392615b94548e6da67becbbb08162dbdf40d309864736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80638da5cb5b11620000565780638da5cb5b14620000a2578063b0655a2c14620000be578063f2fde38b14620000d557600080fd5b806329cfce411462000074578063715018a61462000096575b600080fd5b6200007e620000ec565b6040516200008d919062000423565b60405180910390f35b620000a062000150565b005b6000546040516001600160a01b0390911681526020016200008d565b620000a0620000cf3660046200053a565b62000168565b620000a0620000e6366004620005d3565b620002c2565b606060018054806020026020016040519081016040528092919081815260200182805480156200014657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000127575b5050505050905090565b6200015a6200035c565b620001666000620003b8565b565b620001726200035c565b6000620001818260186200060e565b6200018f90610e106200060e565b6200019b90426200062e565b905060003388600254898888878c604051620001b79062000415565b620001ca9897969594939291906200068c565b604051809103906000f080158015620001e7573d6000803e3d6000fd5b5060018054808201825560008281527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600280549394509192620002569084906200062e565b909155505060025433906001600160a01b038316907ffb6a4b4a9a941613181b9b90b80c89559f5b6128ecbe7eaf24dba64198de7940906200029b90600190620006f5565b88868b604051620002b094939291906200070b565b60405180910390a35050505050505050565b620002cc6200035c565b6001600160a01b0381166200034e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200035981620003b8565b50565b6000546001600160a01b03163314620001665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000345565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61157d806200073a83390190565b6020808252825182820181905260009190848201906040850190845b81811015620004665783516001600160a01b0316835292840192918401916001016200043f565b50909695505050505050565b80356001600160a01b03811681146200048a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004b757600080fd5b813567ffffffffffffffff80821115620004d557620004d56200048f565b604051601f8301601f19908116603f011681019082821181831017156200050057620005006200048f565b816040528381528660208588010111156200051a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156200055457600080fd5b6200055f8762000472565b95506020870135945060408701359350606087013567ffffffffffffffff808211156200058b57600080fd5b620005998a838b01620004a5565b94506080890135915080821115620005b057600080fd5b50620005bf89828a01620004a5565b92505060a087013590509295509295509295565b600060208284031215620005e657600080fd5b620005f18262000472565b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006285762000628620005f8565b92915050565b80820180821115620006285762000628620005f8565b6000815180845260005b818110156200066c576020818501810151868301820152016200064e565b506000602082860101526020601f19601f83011685010191505092915050565b60006101006001600160a01b03808c168452808b16602085015250886040840152876060840152806080840152620006c78184018862000644565b905082810360a0840152620006dd818762000644565b60c0840195909552505060e001529695505050505050565b81810381811115620006285762000628620005f8565b84815260806020820152600062000726608083018662000644565b604083019490945250606001529291505056fe60e06040526005805460ff191660031790553480156200001e57600080fd5b506040516200157d3803806200157d8339810160408190526200004191620002df565b6200004c33620001ad565b6001600160a01b03808916608052871660a05260016200006d858262000425565b5060c0869052600262000081848262000425565b506200008f82601862000507565b6200009d90610e1062000507565b620000a9904262000527565b600080805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b919091556005805460ff19169055600355620000f985670de0b6b3a764000062000507565b6000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df556200013881670de0b6b3a764000062000507565b6000808052600860209081527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c79290925560045560405130815287917f3c831dcf6fd0b80fe93c3ee5d9557ada5a592ba10c1dbe75b71be141107d60a5910160405180910390a250505050505050506200053d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200021557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024257600080fd5b81516001600160401b03808211156200025f576200025f6200021a565b604051601f8301601f19908116603f011681019082821181831017156200028a576200028a6200021a565b81604052838152602092508683858801011115620002a757600080fd5b600091505b83821015620002cb5785820183015181830184015290820190620002ac565b600093810190920192909252949350505050565b600080600080600080600080610100898b031215620002fd57600080fd5b6200030889620001fd565b97506200031860208a01620001fd565b60408a015160608b015160808c015192995090975095506001600160401b03808211156200034557600080fd5b620003538c838d0162000230565b955060a08b01519150808211156200036a57600080fd5b50620003798b828c0162000230565b60c08b015160e0909b0151999c989b509699959894979350505050565b600181811c90821680620003ab57607f821691505b602082108103620003cc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042057600081815260208120601f850160051c81016020861015620003fb5750805b601f850160051c820191505b818110156200041c5782815560010162000407565b5050505b505050565b81516001600160401b038111156200044157620004416200021a565b620004598162000452845462000396565b84620003d2565b602080601f831160018114620004915760008415620004785750858301515b600019600386901b1c1916600185901b1785556200041c565b600085815260208120601f198616915b82811015620004c257888601518255948401946001909101908401620004a1565b5085821015620004e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620005215762000521620004f1565b92915050565b80820180821115620005215762000521620004f1565b60805160a05160c051610fd8620005a56000396000818161035a01528181610758015281816108040152610c3501526000818161032f015281816104a80152818161073501526107e10152600081816108a30152818161097f0152610af80152610fd86000f3fe6080604052600436106100c75760003560e01c8063bd96fae711610074578063ea07551d1161004e578063ea07551d146101c0578063f2fde38b146101fb578063fbbf93a01461021b57600080fd5b8063bd96fae71461018e578063c2052403146101a3578063d7bb99ba146101b857600080fd5b8063715018a6116100a5578063715018a61461013c5780638da5cb5b14610151578063b2d5ae441461017957600080fd5b80631865c57d146100cc57806319aea115146100f557806348c54b9d14610117575b600080fd5b3480156100d857600080fd5b5060055460ff166040516100ec9190610da7565b60405180910390f35b34801561010157600080fd5b50610115610110366004610dbb565b610245565b005b34801561012357600080fd5b5061012c6103ad565b60405190151581526020016100ec565b34801561014857600080fd5b50610115610554565b34801561015d57600080fd5b506000546040516001600160a01b0390911681526020016100ec565b34801561018557600080fd5b5061012c610568565b34801561019a57600080fd5b506101156106fb565b3480156101af57600080fd5b5061012c61084e565b61011561093d565b3480156101cc57600080fd5b506101ed6101db366004610de7565b60066020526000908152604090205481565b6040519081526020016100ec565b34801561020757600080fd5b50610115610216366004610de7565b610a56565b34801561022757600080fd5b50610230610ae8565b6040516100ec99989796959493929190610e5d565b61024d610cad565b60038060055460ff16600381111561026757610267610d6f565b146102855760405163f383ec1960e01b815260040160405180910390fd5b6001600360008282546102989190610ee7565b909155506102b0905084670de0b6b3a7640000610efa565b60038054600090815260086020908152604080832094909455915481526007909152208390556102e1826018610efa565b6102ed90610e10610efa565b6102f79042610ee7565b60038054600090815260096020908152604091829020939093556005805460ff191690559054815190815291820186905281018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316907f0000000000000000000000000000000000000000000000000000000000000000907f753b8d108e14f127257005d564a8287f99943fc30306134452cf4cad0bb5dcb39060600160405180910390a350505050565b600060018060055460ff1660038111156103c9576103c9610d6f565b146103e75760405163f383ec1960e01b815260040160405180910390fd5b33600090815260066020526040812054900361041657604051632a022d0f60e11b815260040160405180910390fd5b6003546000908152600760209081526040808320546008835281842054338552600690935290832054909161044a91610f11565b6104549190610efa565b3360008181526006602052604080822091909155517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018290529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610f33565b5060405181815233907f4d7f917f6b905f28ba5297e6c224a6cfec20ac6a3698a55b412d30b95ad25d2f9060200160405180910390a260019250505090565b61055c610cad565b6105666000610d07565b565b600060028060055460ff16600381111561058457610584610d6f565b146105a25760405163f383ec1960e01b815260040160405180910390fd5b6003546000908152600960205260409020544210156105ed576040517f9af5028d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260066020526040812054900361061c57604051632a022d0f60e11b815260040160405180910390fd5b3360008181526006602052604080822054905190929083908381818185875af1925050503d806000811461066c576040519150601f19603f3d011682016040523d82523d6000602084013e610671565b606091505b50509050806106935760405163f68aaf4160e01b815260040160405180910390fd5b336000908152600660205260408120819055600480548492906106b7908490610f55565b909155505060405182815233907f7ab855409e27a3b361adc9ebbc0750f5efb6d4594be28fef73c314d86d13a7f79060200160405180910390a26001935050505090565b600354600090815260086020526040902054600454106107a8576005805460ff191660011790556003546040519081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000907fa39ae0d7691252825674f6236b141740ed91074f3d797e104266d0b51ff18a68906020015b60405180910390a3565b600354600090815260096020526040902054421115610566576005805460ff191660021790556003546040519081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000907fbc000f0d278d68c57829609b564a0212ef66a6062eb8ed49f97960744f8f21479060200161079e565b6000610858610cad565b60018060055460ff16600381111561087257610872610d6f565b146108905760405163f383ec1960e01b815260040160405180910390fd5b6004546040516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016918381818185875af1925050503d80600081146108fc576040519150601f19603f3d011682016040523d82523d6000602084013e610901565b606091505b50509050806109235760405163f68aaf4160e01b815260040160405180910390fd5b50506000600455506005805460ff19166003179055600190565b60008060055460ff16600381111561095757610957610d6f565b146109755760405163f383ec1960e01b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036109d7576040517fd39b9cf600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260066020526040812080543492906109f6908490610ee7565b925050819055503460046000828254610a0f9190610ee7565b9091555050604051348152309033907f37be9bdbd3d0fa9f42e06daf81145e35769daee2a65754d3986d0daf9899a7d69060200160405180910390a3610a536106fb565b50565b610a5e610cad565b6001600160a01b038116610adf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610a5381610d07565b60006060806000806000806000807f0000000000000000000000000000000000000000000000000000000000000000985060018054610b2690610f68565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5290610f68565b8015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b5050505050975060028054610bb390610f68565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdf90610f68565b8015610c2c5780601f10610c0157610100808354040283529160200191610c2c565b820191906000526020600020905b815481529060010190602001808311610c0f57829003601f168201915b505050505096507f0000000000000000000000000000000000000000000000000000000000000000955060086000600354815260200190815260200160002054945060096000600354815260200190815260200160002054935060045492506003549150600560009054906101000a900460ff169050909192939495969798565b6000546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ad6565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052602160045260246000fd5b60048110610da357634e487b7160e01b600052602160045260246000fd5b9052565b60208101610db58284610d85565b92915050565b600080600060608486031215610dd057600080fd5b505081359360208301359350604090920135919050565b600060208284031215610df957600080fd5b81356001600160a01b0381168114610e1057600080fd5b9392505050565b6000815180845260005b81811015610e3d57602081850181015186830182015201610e21565b506000602082860101526020601f19601f83011685010191505092915050565b60006101206001600160a01b038c168352806020840152610e808184018c610e17565b90508281036040840152610e94818b610e17565b9150508760608301528660808301528560a08301528460c08301528360e0830152610ec3610100830184610d85565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610db557610db5610ed1565b8082028115828204841417610db557610db5610ed1565b600082610f2e57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610f4557600080fd5b81518015158114610e1057600080fd5b81810381811115610db557610db5610ed1565b600181811c90821680610f7c57607f821691505b602082108103610f9c57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212200f6801cb30ceb240797374a5a89c51d0d78c530f7d73c034d87679269cae50a264736f6c63430008110033a2646970667358221220e760f4455a1124e3df911f31392615b94548e6da67becbbb08162dbdf40d309864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProject(address,uint256,uint256,string,string,uint256)": {
        "details": "This is called by the CrowdFundingDAO, once the voters have agreed to add this project into active list"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Propose a project (name, website, logo, prject description, prospects, fund amount, formula: numOfTokens to issue in exchange for 1ETH, dao details) Fund a project (projectId, amount) - become a member of the project's DAO if enough num of tokens Funding complete - DAO created, members added",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10136,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "s_projects",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(Project)11238)dyn_storage"
      },
      {
        "astId": 10139,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "currentProjId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Project)11238)dyn_storage": {
        "base": "t_contract(Project)11238",
        "encoding": "dynamic_array",
        "label": "contract Project[]",
        "numberOfBytes": "32"
      },
      "t_contract(Project)11238": {
        "encoding": "inplace",
        "label": "contract Project",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}