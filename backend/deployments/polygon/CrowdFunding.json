{
  "address": "0xE31F997aC679413688A32A0205E6c0157B1b625f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goalAmount",
          "type": "uint256"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toIssue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goalAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "durationInDays",
          "type": "uint256"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveProjects",
      "outputs": [
        {
          "internalType": "contract Project[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6018e5f2273e783346b78afbb14d174fc738f9a6f16498b80029f50ab0f029be",
  "receipt": {
    "to": null,
    "from": "0x8C151675E4CC8A356888a25cB60169914ebADa75",
    "contractAddress": "0xE31F997aC679413688A32A0205E6c0157B1b625f",
    "transactionIndex": 17,
    "gasUsed": "1377049",
    "logsBloom": "0x
    "blockHash": "0x06dd903c8200bad78f5e349c6126bd9347b36754fceb96c63f4d460260e9e35e",
    "transactionHash": "0x6018e5f2273e783346b78afbb14d174fc738f9a6f16498b80029f50ab0f029be",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 28886019,
        "transactionHash": "0x6018e5f2273e783346b78afbb14d174fc738f9a6f16498b80029f50ab0f029be",
        "address": "0xE31F997aC679413688A32A0205E6c0157B1b625f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c151675e4cc8a356888a25cb60169914ebada75"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x06dd903c8200bad78f5e349c6126bd9347b36754fceb96c63f4d460260e9e35e"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 28886019,
        "transactionHash": "0x6018e5f2273e783346b78afbb14d174fc738f9a6f16498b80029f50ab0f029be",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008c151675e4cc8a356888a25cb60169914ebada75",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000756a0ceb9970000000000000000000000000000000000000000000000000006bd03e484ee259d000000000000000000000000000000000000000000001731f4b7bae79148409a00000000000000000000000000000000000000000000000006b5ad43b6348e9d000000000000000000000000000000000000000000001731f4bf11886001d79a",
        "logIndex": 82,
        "blockHash": "0x06dd903c8200bad78f5e349c6126bd9347b36754fceb96c63f4d460260e9e35e"
      }
    ],
    "blockNumber": 28886019,
    "cumulativeGasUsed": "4363830",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc1f53d7ce9e496e92c43f99c69fc366",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProjects\",\"outputs\":[{\"internalType\":\"contract Project[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProject(address,uint256,uint256,string,string,uint256)\":{\"details\":\"This is called by the CrowdFundingDAO, once the voters have agreed to add this project into active list\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Propose a project (name, website, logo, prject description, prospects, fund amount, formula: numOfTokens to issue in exchange for 1ETH, dao details) Fund a project (projectId, amount) - become a member of the project's DAO if enough num of tokens Funding complete - DAO created, members added\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunding.sol\":\"CrowdFunding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/CrowdFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./Project.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * Propose a project (name, website, logo, prject description, prospects, fund amount, formula: numOfTokens to issue in exchange for 1ETH, dao details)\\r\\n * Fund a project (projectId, amount) - become a member of the project's DAO if enough num of tokens\\r\\n * Funding complete - DAO created, members added\\r\\n */\\r\\ncontract CrowdFunding is Ownable {\\r\\n    Project[] private s_projects;\\r\\n    uint private currentProjId = 0;\\r\\n\\r\\n    event ProjectCreated(\\r\\n        address indexed contractAddress,\\r\\n        address indexed creator,\\r\\n        uint projectId,\\r\\n        string projectTitle,\\r\\n        uint256 deadline,\\r\\n        uint256 goalAmount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev This is called by the CrowdFundingDAO, once the voters have agreed to add this project into active list\\r\\n     */\\r\\n    function createProject(\\r\\n        address token,\\r\\n        uint toIssue,\\r\\n        uint goalAmount,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint durationInDays\\r\\n    ) public onlyOwner {\\r\\n        uint fundRaisingDeadline = block.timestamp +\\r\\n            (durationInDays * 24 * 3600);\\r\\n        Project project = new Project(\\r\\n            msg.sender,\\r\\n            token,\\r\\n            currentProjId,\\r\\n            toIssue,\\r\\n            title,\\r\\n            description,\\r\\n            fundRaisingDeadline\\r\\n        );\\r\\n        s_projects.push(project);\\r\\n        currentProjId += 1;\\r\\n        emit ProjectCreated(\\r\\n            address(project), //project address\\r\\n            msg.sender, //project initiator\\r\\n            (currentProjId - 1),\\r\\n            title, //coin name or starting of project\\r\\n            fundRaisingDeadline, //deadline in days\\r\\n            goalAmount //amnt needed to be raised\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getActiveProjects() public view returns (Project[] memory) {\\r\\n        return s_projects;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x52742bafeb88cd505c3ac3c1767f2c35bee93e6ff4b6e9430a3a5a1e7b598746\",\"license\":\"MIT\"},\"contracts/Project.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\nerror Project__IncorrectState();\\r\\nerror Project__CreatorCannotFundHisProject();\\r\\nerror Project__FundingNotExpired();\\r\\nerror Project__FundsNotGiven();\\r\\nerror Project__FailedToSendFunds();\\r\\nerror Project__AmountExceedsLimit();\\r\\n\\r\\ncontract Project {\\r\\n    enum State {\\r\\n        FUNDRAISING,\\r\\n        SUCCESS,\\r\\n        EXPIRED,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    event ProjectStart(uint indexed id, address project_address);\\r\\n\\r\\n    // For testing pruposes. Will be changed to a higher number\\r\\n    uint constant MIN_FUNDERS = 2;\\r\\n    address payable private immutable i_creator;\\r\\n    address private immutable i_token;\\r\\n    uint private immutable i_id;\\r\\n    uint private immutable i_tokensToIssue;\\r\\n    string private s_title;\\r\\n    string private s_description;\\r\\n    uint private s_fundingRound;\\r\\n    uint private s_goalAmount;\\r\\n    uint private s_rasieBy;\\r\\n    uint private s_currentBalance;\\r\\n    uint private s_maxAmountToInvest;\\r\\n    State private s_state = State.CLOSED;\\r\\n\\r\\n    mapping(address => uint) contributedFunds;\\r\\n\\r\\n    event ClaimTokens(address indexed to, uint amount);\\r\\n\\r\\n    event FundsContributed(\\r\\n        address indexed sender,\\r\\n        address indexed contractAddress,\\r\\n        uint amount\\r\\n    );\\r\\n\\r\\n    event AmountRefunded(address indexed to, uint amount);\\r\\n\\r\\n    event FundingSuccess(\\r\\n        uint indexed projectId,\\r\\n        address indexed projectToken,\\r\\n        uint round\\r\\n    );\\r\\n\\r\\n    modifier isState(State _state) {\\r\\n        if (s_state != _state) {\\r\\n            revert Project__IncorrectState();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address creator,\\r\\n        address token,\\r\\n        uint id,\\r\\n        uint tokenToIssue,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint fundRaisingDeadline\\r\\n    ) {\\r\\n        i_creator = payable(creator);\\r\\n        i_token = token;\\r\\n        i_tokensToIssue = tokenToIssue;\\r\\n        s_title = title;\\r\\n        i_id = id;\\r\\n        s_description = description;\\r\\n        s_rasieBy = block.timestamp + fundRaisingDeadline*24*3600;\\r\\n        s_state = State.FUNDRAISING;\\r\\n        s_fundingRound = 1;\\r\\n        s_goalAmount = s_fundingRound * 1000;\\r\\n        s_currentBalance = 0;\\r\\n        s_maxAmountToInvest = Math.ceilDiv(s_goalAmount, MIN_FUNDERS);\\r\\n        emit ProjectStart(id, address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gather funds to meet the goal before deadline. Creator is not allowed to fund his project. For intial rounds, funders can only give a certain max\\r\\n     * amount which would be changed to any amount after certain number of rounds\\r\\n     */\\r\\n    function contribute() public payable isState(State.FUNDRAISING) {\\r\\n        if (msg.sender == i_creator)\\r\\n            revert Project__CreatorCannotFundHisProject();\\r\\n        if (contributedFunds[msg.sender] + msg.value > s_maxAmountToInvest)\\r\\n            revert Project__AmountExceedsLimit();\\r\\n\\r\\n        contributedFunds[msg.sender] += msg.value;\\r\\n        s_currentBalance += msg.value;\\r\\n        emit FundsContributed(msg.sender, address(this), msg.value);\\r\\n        checkIfFundingCompletedOrExpired();\\r\\n    }\\r\\n\\r\\n    function checkIfFundingCompletedOrExpired() public {\\r\\n        if (s_currentBalance >= s_goalAmount) {\\r\\n            s_state = State.SUCCESS;\\r\\n            emit FundingSuccess(i_id, i_token, s_fundingRound);\\r\\n        } else if (block.timestamp > s_rasieBy) {\\r\\n            s_state = State.EXPIRED;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev start successive funding rounds after majority funders agree to it\\r\\n     */\\r\\n    function initiateFundingRound() public isState(State.CLOSED) {}\\r\\n\\r\\n    function payOut() internal isState(State.SUCCESS) returns (bool) {\\r\\n        (bool callSuccess, ) = i_creator.call{value: s_currentBalance}(\\\"\\\");\\r\\n        if (!callSuccess) revert Project__FailedToSendFunds();\\r\\n\\r\\n        s_currentBalance = 0;\\r\\n        s_state = State.CLOSED;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev investor recieves a proportion of Project's tokens based on amount funded\\r\\n     * @notice assume the Project token is already deployed\\r\\n     *\\r\\n     * SUGGESTION: We can mint the relevant project tokens here and issue it to investor\\r\\n     */\\r\\n    function claimTokens() public isState(State.SUCCESS) returns (bool) {\\r\\n        if (contributedFunds[msg.sender] == 0) revert Project__FundsNotGiven();\\r\\n\\r\\n        uint tokens = (contributedFunds[msg.sender] / s_goalAmount) *\\r\\n            i_tokensToIssue;\\r\\n        contributedFunds[msg.sender] = 0;\\r\\n\\r\\n        IERC20(i_token).transfer(msg.sender, tokens);\\r\\n        emit ClaimTokens(msg.sender, tokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getRefund() public isState(State.EXPIRED) returns (bool) {\\r\\n        if (block.timestamp < s_rasieBy) revert Project__FundingNotExpired();\\r\\n        if (contributedFunds[msg.sender] == 0) revert Project__FundsNotGiven();\\r\\n\\r\\n        uint amountToRefund = contributedFunds[msg.sender];\\r\\n        (bool callSuccess, ) = msg.sender.call{value: amountToRefund}(\\\"\\\");\\r\\n        if (!callSuccess) revert Project__FailedToSendFunds();\\r\\n\\r\\n        contributedFunds[msg.sender] = 0;\\r\\n        s_currentBalance -= amountToRefund;\\r\\n        emit AmountRefunded(msg.sender, amountToRefund);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getState() public view returns(State) {\\r\\n        return s_state;\\r\\n    }\\r\\n\\r\\n    function getDetails()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address payable projectStarter,\\r\\n            string memory projectTitle,\\r\\n            string memory projectDescription,\\r\\n            uint projectId,\\r\\n            uint goalAmount,\\r\\n            uint deadline,\\r\\n            uint amountRaised,\\r\\n            uint fundingRound,\\r\\n            State currentState\\r\\n        )\\r\\n    {\\r\\n        projectStarter = i_creator;\\r\\n        projectTitle = s_title;\\r\\n        projectDescription = s_description;\\r\\n        projectId = i_id;\\r\\n        goalAmount = s_goalAmount;\\r\\n        deadline = s_rasieBy;\\r\\n        amountRaised = s_currentBalance;\\r\\n        fundingRound = s_fundingRound;\\r\\n        currentState = s_state;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcdd99dafa06f6aa45de5dc7abaefda9f9968ccb0539bc9f37861d002b67a162e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025534801561001557600080fd5b5061001f33610024565b610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611795806100836000396000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80638da5cb5b11620000565780638da5cb5b14620000a2578063b0655a2c14620000be578063f2fde38b14620000d557600080fd5b806329cfce411462000074578063715018a61462000096575b600080fd5b6200007e620000ec565b6040516200008d919062000421565b60405180910390f35b620000a062000150565b005b6000546040516001600160a01b0390911681526020016200008d565b620000a0620000cf36600462000538565b62000168565b620000a0620000e6366004620005d1565b620002c0565b606060018054806020026020016040519081016040528092919081815260200182805480156200014657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000127575b5050505050905090565b6200015a6200035a565b620001666000620003b6565b565b620001726200035a565b6000620001818260186200060c565b6200018f90610e106200060c565b6200019b90426200062c565b90506000338860025489888887604051620001b69062000413565b620001c897969594939291906200068a565b604051809103906000f080158015620001e5573d6000803e3d6000fd5b5060018054808201825560008281527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600280549394509192620002549084906200062c565b909155505060025433906001600160a01b038316907ffb6a4b4a9a941613181b9b90b80c89559f5b6128ecbe7eaf24dba64198de7940906200029990600190620006ed565b88868b604051620002ae949392919062000703565b60405180910390a35050505050505050565b620002ca6200035a565b6001600160a01b0381166200034c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200035781620003b6565b50565b6000546001600160a01b03163314620001665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000343565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61102e806200073283390190565b6020808252825182820181905260009190848201906040850190845b81811015620004645783516001600160a01b0316835292840192918401916001016200043d565b50909695505050505050565b80356001600160a01b03811681146200048857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004b557600080fd5b813567ffffffffffffffff80821115620004d357620004d36200048d565b604051601f8301601f19908116603f01168101908282118183101715620004fe57620004fe6200048d565b816040528381528660208588010111156200051857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156200055257600080fd5b6200055d8762000470565b95506020870135945060408701359350606087013567ffffffffffffffff808211156200058957600080fd5b620005978a838b01620004a3565b94506080890135915080821115620005ae57600080fd5b50620005bd89828a01620004a3565b92505060a087013590509295509295509295565b600060208284031215620005e457600080fd5b620005ef8262000470565b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006265762000626620005f6565b92915050565b80820180821115620006265762000626620005f6565b6000815180845260005b818110156200066a576020818501810151868301820152016200064c565b506000602082860101526020601f19601f83011685010191505092915050565b60006001600160a01b03808a16835280891660208401525086604083015285606083015260e06080830152620006c460e083018662000642565b82810360a0840152620006d8818662000642565b9150508260c083015298975050505050505050565b81810381811115620006265762000626620005f6565b8481526080602082015260006200071e608083018662000642565b604083019490945250606001529291505056fe6101006040526007805460ff191660031790553480156200001f57600080fd5b506040516200102e3803806200102e833981016040819052620000429162000257565b6001600160a01b03808816608052861660a05260e0849052600062000068848262000394565b5060c085905260016200007c838262000394565b506200008a81601862000476565b6200009890610e1062000476565b620000a4904262000490565b6004556007805460ff1916905560016002819055620000c6906103e862000476565b6003819055506000600581905550620000ee60035460026200013360201b620008ab1760201c565b60065560405130815285907f3c831dcf6fd0b80fe93c3ee5d9557ada5a592ba10c1dbe75b71be141107d60a59060200160405180910390a250505050505050620004df565b600082156200016957816200014a600185620004a6565b620001569190620004bc565b6200016390600162000490565b6200016c565b60005b90505b92915050565b80516001600160a01b03811681146200018d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001ba57600080fd5b81516001600160401b0380821115620001d757620001d762000192565b604051601f8301601f19908116603f0116810190828211818310171562000202576200020262000192565b816040528381526020925086838588010111156200021f57600080fd5b600091505b8382101562000243578582018301518183018401529082019062000224565b600093810190920192909252949350505050565b600080600080600080600060e0888a0312156200027357600080fd5b6200027e8862000175565b96506200028e6020890162000175565b604089015160608a015160808b015192985090965094506001600160401b0380821115620002bb57600080fd5b620002c98b838c01620001a8565b945060a08a0151915080821115620002e057600080fd5b50620002ef8a828b01620001a8565b92505060c0880151905092959891949750929550565b600181811c908216806200031a57607f821691505b6020821081036200033b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200038f57600081815260208120601f850160051c810160208610156200036a5750805b601f850160051c820191505b818110156200038b5782815560010162000376565b5050505b505050565b81516001600160401b03811115620003b057620003b062000192565b620003c881620003c1845462000305565b8462000341565b602080601f831160018114620004005760008415620003e75750858301515b600019600386901b1c1916600185901b1785556200038b565b600085815260208120601f198616915b82811015620004315788860151825594840194600190910190840162000410565b5085821015620004505787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200016f576200016f62000460565b808201808211156200016f576200016f62000460565b818103818111156200016f576200016f62000460565b600082620004da57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e051610b006200052e60003960006101b60152600081816104ef015261085901526000818161024b01526104cc0152600081816105a7015261071c0152610b006000f3fe6080604052600436106100705760003560e01c8063bd96fae71161004e578063bd96fae7146100d8578063d7bb99ba146100ef578063daf12f75146100f7578063fbbf93a01461010c57600080fd5b80631865c57d1461007557806348c54b9d1461009e578063b2d5ae44146100c3575b600080fd5b34801561008157600080fd5b5060075460ff16604051610095919061091d565b60405180910390f35b3480156100aa57600080fd5b506100b3610136565b6040519015158152602001610095565b3480156100cf57600080fd5b506100b36102f7565b3480156100e457600080fd5b506100ed610494565b005b6100ed610558565b34801561010357600080fd5b506100ed6106d4565b34801561011857600080fd5b5061012161070c565b60405161009599989796959493929190610971565b600060018060075460ff166003811115610152576101526108e5565b146101705760405163f383ec1960e01b815260040160405180910390fd5b33600090815260086020526040812054900361019f57604051632a022d0f60e11b815260040160405180910390fd5b6003543360009081526008602052604081205490917f0000000000000000000000000000000000000000000000000000000000000000916101e09190610a08565b6101ea9190610a2a565b3360008181526008602052604080822091909155517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101919091526024810182905290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b89190610a41565b5060405181815233907f4d7f917f6b905f28ba5297e6c224a6cfec20ac6a3698a55b412d30b95ad25d2f9060200160405180910390a260019250505090565b600060028060075460ff166003811115610313576103136108e5565b146103315760405163f383ec1960e01b815260040160405180910390fd5b60045442101561036d576040517f9af5028d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260086020526040812054900361039c57604051632a022d0f60e11b815260040160405180910390fd5b3360008181526008602052604080822054905190929083908381818185875af1925050503d80600081146103ec576040519150601f19603f3d011682016040523d82523d6000602084013e6103f1565b606091505b505090508061042c576040517ff68aaf4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260086020526040812081905560058054849290610450908490610a6a565b909155505060405182815233907f7ab855409e27a3b361adc9ebbc0750f5efb6d4594be28fef73c314d86d13a7f79060200160405180910390a26001935050505090565b6003546005541061053e576007805460ff1916600117905560025460405190815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000907fa39ae0d7691252825674f6236b141740ed91074f3d797e104266d0b51ff18a689060200160405180910390a3565b600454421115610556576007805460ff191660021790555b565b60008060075460ff166003811115610572576105726108e5565b146105905760405163f383ec1960e01b815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036105ff576040517fd39b9cf600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006543360009081526008602052604090205461061d903490610a7d565b1115610655576040517f77c5c94100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526008602052604081208054349290610674908490610a7d565b92505081905550346005600082825461068d9190610a7d565b9091555050604051348152309033907f37be9bdbd3d0fa9f42e06daf81145e35769daee2a65754d3986d0daf9899a7d69060200160405180910390a36106d1610494565b50565b60038060075460ff1660038111156106ee576106ee6108e5565b146106d15760405163f383ec1960e01b815260040160405180910390fd5b60006060806000806000806000807f000000000000000000000000000000000000000000000000000000000000000098506000805461074a90610a90565b80601f016020809104026020016040519081016040528092919081815260200182805461077690610a90565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b50505050509750600180546107d790610a90565b80601f016020809104026020016040519081016040528092919081815260200182805461080390610a90565b80156108505780601f1061082557610100808354040283529160200191610850565b820191906000526020600020905b81548152906001019060200180831161083357829003601f168201915b505050505096507f000000000000000000000000000000000000000000000000000000000000000095506003549450600454935060055492506002549150600760009054906101000a900460ff169050909192939495969798565b600082156108d957816108bf600185610a6a565b6108c99190610a08565b6108d4906001610a7d565b6108dc565b60005b90505b92915050565b634e487b7160e01b600052602160045260246000fd5b6004811061091957634e487b7160e01b600052602160045260246000fd5b9052565b602081016108df82846108fb565b6000815180845260005b8181101561095157602081850181015186830182015201610935565b506000602082860101526020601f19601f83011685010191505092915050565b600061012073ffffffffffffffffffffffffffffffffffffffff8c1683528060208401526109a18184018c61092b565b905082810360408401526109b5818b61092b565b9150508760608301528660808301528560a08301528460c08301528360e08301526109e46101008301846108fb565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082610a2557634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176108df576108df6109f2565b600060208284031215610a5357600080fd5b81518015158114610a6357600080fd5b9392505050565b818103818111156108df576108df6109f2565b808201808211156108df576108df6109f2565b600181811c90821680610aa457607f821691505b602082108103610ac457634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220cff63daac5cdd8e213c03e0151d63515da8dced01b50a108de4b8f08b877478f64736f6c63430008110033a264697066735822122030157eecdee48294cf0345e669204fa5ced6d913a220f3da99dd4d5b1786e06664736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80638da5cb5b11620000565780638da5cb5b14620000a2578063b0655a2c14620000be578063f2fde38b14620000d557600080fd5b806329cfce411462000074578063715018a61462000096575b600080fd5b6200007e620000ec565b6040516200008d919062000421565b60405180910390f35b620000a062000150565b005b6000546040516001600160a01b0390911681526020016200008d565b620000a0620000cf36600462000538565b62000168565b620000a0620000e6366004620005d1565b620002c0565b606060018054806020026020016040519081016040528092919081815260200182805480156200014657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000127575b5050505050905090565b6200015a6200035a565b620001666000620003b6565b565b620001726200035a565b6000620001818260186200060c565b6200018f90610e106200060c565b6200019b90426200062c565b90506000338860025489888887604051620001b69062000413565b620001c897969594939291906200068a565b604051809103906000f080158015620001e5573d6000803e3d6000fd5b5060018054808201825560008281527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600280549394509192620002549084906200062c565b909155505060025433906001600160a01b038316907ffb6a4b4a9a941613181b9b90b80c89559f5b6128ecbe7eaf24dba64198de7940906200029990600190620006ed565b88868b604051620002ae949392919062000703565b60405180910390a35050505050505050565b620002ca6200035a565b6001600160a01b0381166200034c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200035781620003b6565b50565b6000546001600160a01b03163314620001665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000343565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61102e806200073283390190565b6020808252825182820181905260009190848201906040850190845b81811015620004645783516001600160a01b0316835292840192918401916001016200043d565b50909695505050505050565b80356001600160a01b03811681146200048857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004b557600080fd5b813567ffffffffffffffff80821115620004d357620004d36200048d565b604051601f8301601f19908116603f01168101908282118183101715620004fe57620004fe6200048d565b816040528381528660208588010111156200051857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156200055257600080fd5b6200055d8762000470565b95506020870135945060408701359350606087013567ffffffffffffffff808211156200058957600080fd5b620005978a838b01620004a3565b94506080890135915080821115620005ae57600080fd5b50620005bd89828a01620004a3565b92505060a087013590509295509295509295565b600060208284031215620005e457600080fd5b620005ef8262000470565b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006265762000626620005f6565b92915050565b80820180821115620006265762000626620005f6565b6000815180845260005b818110156200066a576020818501810151868301820152016200064c565b506000602082860101526020601f19601f83011685010191505092915050565b60006001600160a01b03808a16835280891660208401525086604083015285606083015260e06080830152620006c460e083018662000642565b82810360a0840152620006d8818662000642565b9150508260c083015298975050505050505050565b81810381811115620006265762000626620005f6565b8481526080602082015260006200071e608083018662000642565b604083019490945250606001529291505056fe6101006040526007805460ff191660031790553480156200001f57600080fd5b506040516200102e3803806200102e833981016040819052620000429162000257565b6001600160a01b03808816608052861660a05260e0849052600062000068848262000394565b5060c085905260016200007c838262000394565b506200008a81601862000476565b6200009890610e1062000476565b620000a4904262000490565b6004556007805460ff1916905560016002819055620000c6906103e862000476565b6003819055506000600581905550620000ee60035460026200013360201b620008ab1760201c565b60065560405130815285907f3c831dcf6fd0b80fe93c3ee5d9557ada5a592ba10c1dbe75b71be141107d60a59060200160405180910390a250505050505050620004df565b600082156200016957816200014a600185620004a6565b620001569190620004bc565b6200016390600162000490565b6200016c565b60005b90505b92915050565b80516001600160a01b03811681146200018d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001ba57600080fd5b81516001600160401b0380821115620001d757620001d762000192565b604051601f8301601f19908116603f0116810190828211818310171562000202576200020262000192565b816040528381526020925086838588010111156200021f57600080fd5b600091505b8382101562000243578582018301518183018401529082019062000224565b600093810190920192909252949350505050565b600080600080600080600060e0888a0312156200027357600080fd5b6200027e8862000175565b96506200028e6020890162000175565b604089015160608a015160808b015192985090965094506001600160401b0380821115620002bb57600080fd5b620002c98b838c01620001a8565b945060a08a0151915080821115620002e057600080fd5b50620002ef8a828b01620001a8565b92505060c0880151905092959891949750929550565b600181811c908216806200031a57607f821691505b6020821081036200033b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200038f57600081815260208120601f850160051c810160208610156200036a5750805b601f850160051c820191505b818110156200038b5782815560010162000376565b5050505b505050565b81516001600160401b03811115620003b057620003b062000192565b620003c881620003c1845462000305565b8462000341565b602080601f831160018114620004005760008415620003e75750858301515b600019600386901b1c1916600185901b1785556200038b565b600085815260208120601f198616915b82811015620004315788860151825594840194600190910190840162000410565b5085821015620004505787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200016f576200016f62000460565b808201808211156200016f576200016f62000460565b818103818111156200016f576200016f62000460565b600082620004da57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e051610b006200052e60003960006101b60152600081816104ef015261085901526000818161024b01526104cc0152600081816105a7015261071c0152610b006000f3fe6080604052600436106100705760003560e01c8063bd96fae71161004e578063bd96fae7146100d8578063d7bb99ba146100ef578063daf12f75146100f7578063fbbf93a01461010c57600080fd5b80631865c57d1461007557806348c54b9d1461009e578063b2d5ae44146100c3575b600080fd5b34801561008157600080fd5b5060075460ff16604051610095919061091d565b60405180910390f35b3480156100aa57600080fd5b506100b3610136565b6040519015158152602001610095565b3480156100cf57600080fd5b506100b36102f7565b3480156100e457600080fd5b506100ed610494565b005b6100ed610558565b34801561010357600080fd5b506100ed6106d4565b34801561011857600080fd5b5061012161070c565b60405161009599989796959493929190610971565b600060018060075460ff166003811115610152576101526108e5565b146101705760405163f383ec1960e01b815260040160405180910390fd5b33600090815260086020526040812054900361019f57604051632a022d0f60e11b815260040160405180910390fd5b6003543360009081526008602052604081205490917f0000000000000000000000000000000000000000000000000000000000000000916101e09190610a08565b6101ea9190610a2a565b3360008181526008602052604080822091909155517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101919091526024810182905290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b89190610a41565b5060405181815233907f4d7f917f6b905f28ba5297e6c224a6cfec20ac6a3698a55b412d30b95ad25d2f9060200160405180910390a260019250505090565b600060028060075460ff166003811115610313576103136108e5565b146103315760405163f383ec1960e01b815260040160405180910390fd5b60045442101561036d576040517f9af5028d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260086020526040812054900361039c57604051632a022d0f60e11b815260040160405180910390fd5b3360008181526008602052604080822054905190929083908381818185875af1925050503d80600081146103ec576040519150601f19603f3d011682016040523d82523d6000602084013e6103f1565b606091505b505090508061042c576040517ff68aaf4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260086020526040812081905560058054849290610450908490610a6a565b909155505060405182815233907f7ab855409e27a3b361adc9ebbc0750f5efb6d4594be28fef73c314d86d13a7f79060200160405180910390a26001935050505090565b6003546005541061053e576007805460ff1916600117905560025460405190815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000907fa39ae0d7691252825674f6236b141740ed91074f3d797e104266d0b51ff18a689060200160405180910390a3565b600454421115610556576007805460ff191660021790555b565b60008060075460ff166003811115610572576105726108e5565b146105905760405163f383ec1960e01b815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036105ff576040517fd39b9cf600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006543360009081526008602052604090205461061d903490610a7d565b1115610655576040517f77c5c94100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526008602052604081208054349290610674908490610a7d565b92505081905550346005600082825461068d9190610a7d565b9091555050604051348152309033907f37be9bdbd3d0fa9f42e06daf81145e35769daee2a65754d3986d0daf9899a7d69060200160405180910390a36106d1610494565b50565b60038060075460ff1660038111156106ee576106ee6108e5565b146106d15760405163f383ec1960e01b815260040160405180910390fd5b60006060806000806000806000807f000000000000000000000000000000000000000000000000000000000000000098506000805461074a90610a90565b80601f016020809104026020016040519081016040528092919081815260200182805461077690610a90565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b50505050509750600180546107d790610a90565b80601f016020809104026020016040519081016040528092919081815260200182805461080390610a90565b80156108505780601f1061082557610100808354040283529160200191610850565b820191906000526020600020905b81548152906001019060200180831161083357829003601f168201915b505050505096507f000000000000000000000000000000000000000000000000000000000000000095506003549450600454935060055492506002549150600760009054906101000a900460ff169050909192939495969798565b600082156108d957816108bf600185610a6a565b6108c99190610a08565b6108d4906001610a7d565b6108dc565b60005b90505b92915050565b634e487b7160e01b600052602160045260246000fd5b6004811061091957634e487b7160e01b600052602160045260246000fd5b9052565b602081016108df82846108fb565b6000815180845260005b8181101561095157602081850181015186830182015201610935565b506000602082860101526020601f19601f83011685010191505092915050565b600061012073ffffffffffffffffffffffffffffffffffffffff8c1683528060208401526109a18184018c61092b565b905082810360408401526109b5818b61092b565b9150508760608301528660808301528560a08301528460c08301528360e08301526109e46101008301846108fb565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082610a2557634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176108df576108df6109f2565b600060208284031215610a5357600080fd5b81518015158114610a6357600080fd5b9392505050565b818103818111156108df576108df6109f2565b808201808211156108df576108df6109f2565b600181811c90821680610aa457607f821691505b602082108103610ac457634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220cff63daac5cdd8e213c03e0151d63515da8dced01b50a108de4b8f08b877478f64736f6c63430008110033a264697066735822122030157eecdee48294cf0345e669204fa5ced6d913a220f3da99dd4d5b1786e06664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProject(address,uint256,uint256,string,string,uint256)": {
        "details": "This is called by the CrowdFundingDAO, once the voters have agreed to add this project into active list"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Propose a project (name, website, logo, prject description, prospects, fund amount, formula: numOfTokens to issue in exchange for 1ETH, dao details) Fund a project (projectId, amount) - become a member of the project's DAO if enough num of tokens Funding complete - DAO created, members added",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10136,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "s_projects",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(Project)11144)dyn_storage"
      },
      {
        "astId": 10139,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "currentProjId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Project)11144)dyn_storage": {
        "base": "t_contract(Project)11144",
        "encoding": "dynamic_array",
        "label": "contract Project[]",
        "numberOfBytes": "32"
      },
      "t_contract(Project)11144": {
        "encoding": "inplace",
        "label": "contract Project",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}